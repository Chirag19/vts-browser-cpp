/**
 * Copyright (c) 2017 Melown Technologies SE
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * *  Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

// THIS FILE IS GENERATED BY SCRIPT
// DO NOT MODIFY

using System;
using System.Runtime.InteropServices;

namespace vts
{
	public static class BrowserInterop
	{

#if DEBUG
	const string LibName = "vts-browser-d";
#else
	const string LibName = "vts-browser";
#endif

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void vtsResourceCallbackType(IntPtr map, IntPtr resource);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void vtsStateCallbackType(IntPtr map);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void vtsCameraOverrideCallbackType(IntPtr map, IntPtr values);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate IntPtr  vtsProjFinderCallbackType([MarshalAs(UnmanagedType.LPStr)] string name);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksLoadTexture(IntPtr map, vtsResourceCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksLoadMesh(IntPtr map, vtsResourceCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksMapconfigAvailable(IntPtr map, vtsStateCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksMapconfigReady(IntPtr map, vtsStateCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksCameraEye(IntPtr map, vtsCameraOverrideCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksCameraTarget(IntPtr map, vtsCameraOverrideCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksCameraUp(IntPtr map, vtsCameraOverrideCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksCameraFovAspectNearFar(IntPtr map, vtsCameraOverrideCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksCameraView(IntPtr map, vtsCameraOverrideCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsCallbacksCameraProj(IntPtr map, vtsCameraOverrideCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsProjFinder(vtsProjFinderCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsCelestialName(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern double vtsCelestialMajorRadius(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern double vtsCelestialMinorRadius(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern double vtsCelestialAtmosphereThickness(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsCamera(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsOpaque(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsTransparent(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsGeodata(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsInfographics(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern uint vtsDrawsCount(IntPtr group);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsDrawsDestroy(IntPtr group);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsMesh(IntPtr group, uint index);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsTexColor(IntPtr group, uint index);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsTexMask(IntPtr group, uint index);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsDetail(IntPtr group, uint index);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsDrawsAllInOne(IntPtr group, uint index, out IntPtr mesh, out IntPtr texColor, out IntPtr texMask);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsFetcherCreateDefault([MarshalAs(UnmanagedType.LPStr)] string createOptions);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsFetcherDestroy(IntPtr fetcher);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern int vtsErrCode();

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsErrMsg();

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsErrCodeToName(int code);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsErrClear();

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void vtsLogCallbackType([MarshalAs(UnmanagedType.LPStr)] string msg);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsLogSetMaskStr([MarshalAs(UnmanagedType.LPStr)] string mask);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsLogSetMaskCode(uint mask);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsLogSetConsole([MarshalAs(UnmanagedType.I1)] bool enable);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsLogSetFile([MarshalAs(UnmanagedType.LPStr)] string filename);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsLogSetThreadName([MarshalAs(UnmanagedType.LPStr)] string name);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsLogAddSink(uint mask, vtsLogCallbackType callback);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsLog(uint level, [MarshalAs(UnmanagedType.LPStr)] string message);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapCreate([MarshalAs(UnmanagedType.LPStr)] string createOptions);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapDestroy(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetCustomData(IntPtr map, IntPtr data);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapGetCustomData(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetConfigPaths(IntPtr map, [MarshalAs(UnmanagedType.LPStr)] string mapConfigPath, [MarshalAs(UnmanagedType.LPStr)] string authPath, [MarshalAs(UnmanagedType.LPStr)] string sriPath);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapGetConfigPath(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
[return: MarshalAs(UnmanagedType.I1)]
public static extern bool vtsMapGetConfigAvailable(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
[return: MarshalAs(UnmanagedType.I1)]
public static extern bool vtsMapGetConfigReady(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
[return: MarshalAs(UnmanagedType.I1)]
public static extern bool vtsMapGetRenderComplete(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern double vtsMapGetRenderProgress(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapDataInitialize(IntPtr map, IntPtr fetcher);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapDataTick(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapDataFinalize(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapRenderInitialize(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapRenderTickPrepare(IntPtr map, double elapsedTime);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapRenderTickRender(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapRenderFinalize(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetWindowSize(IntPtr map, uint width, uint height);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapGetOptions(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapGetStatistics(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapGetCredits(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapGetCreditsShort(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapGetCreditsFull(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetOptions(IntPtr map, [MarshalAs(UnmanagedType.LPStr)] string options);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapPan(IntPtr map, [In] double[] value);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapRotate(IntPtr map, [In] double[] value);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapZoom(IntPtr map, double value);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapResetPositionAltitude(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapResetNavigationMode(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetPositionSubjective(IntPtr map, [MarshalAs(UnmanagedType.I1)] bool subjective, [MarshalAs(UnmanagedType.I1)] bool convert);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetPositionPoint(IntPtr map, [In] double[] point);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetPositionRotation(IntPtr map, [In] double[] point);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetPositionViewExtent(IntPtr map, double viewExtent);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetPositionFov(IntPtr map, double fov);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetPositionJson(IntPtr map, [MarshalAs(UnmanagedType.LPStr)] string position);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetPositionUrl(IntPtr map, [MarshalAs(UnmanagedType.LPStr)] string position);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapSetAutoRotation(IntPtr map, double value);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
[return: MarshalAs(UnmanagedType.I1)]
public static extern bool vtsMapGetPositionSubjective(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapGetPositionPoint(IntPtr map, [Out] double[] point);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapGetPositionRotation(IntPtr map, [Out] double[] rot);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapGetPositionRotationLimited(IntPtr map, [Out] double[] rot);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern double vtsMapGetPositionViewExtent(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern double vtsMapGetPositionFov(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapGetPositionUrl(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapGetPositionJson(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern double vtsMapGetAutoRotation(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMapConvert(IntPtr map, [In] double[] pointFrom, [Out] double[] pointTo, uint srsFrom, uint SrsTo);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMathMul44x44([Out] double[] result, [In] double[] l, [In] double[] r);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMathMul33x33([Out] double[] result, [In] double[] l, [In] double[] r);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMathMul44x4([Out] double[] result, [In] double[] l, [In] double[] r);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMathInverse44([Out] double[] result, [In] double[] r);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsMathInverse33([Out] double[] result, [In] double[] r);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern uint vtsGpuTypeSize(uint type);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate void vtsResourceDeleterCallbackType(IntPtr ptr);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsSetResourceUserData(IntPtr resource, IntPtr data, vtsResourceDeleterCallbackType deleter);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsSetResourceMemoryCost(IntPtr resource, uint ramMem, uint gpuMem);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsGetTextureResolution(IntPtr resource, out uint width, out uint height, out uint components);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern uint vtsGetTextureType(IntPtr resource);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern uint vtsGetTextureInternalFormat(IntPtr resource);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsGetTextureBuffer(IntPtr resource, out IntPtr data, out uint size);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern uint vtsGetMeshFaceMode(IntPtr resource);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsGetMeshVertices(IntPtr resource, out IntPtr data, out uint size, out uint count);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsGetMeshIndices(IntPtr resource, out IntPtr data, out uint size, out uint count);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsGetMeshAttribute(IntPtr resource, uint index, out uint offset, out uint stride, out uint components, out uint type, [MarshalAs(UnmanagedType.I1)] out bool enable, [MarshalAs(UnmanagedType.I1)] out bool normalized);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
[return: MarshalAs(UnmanagedType.I1)]
public static extern bool vtsMapGetSearchable(IntPtr map);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapSearch(IntPtr map, [MarshalAs(UnmanagedType.LPStr)] string query);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsMapSearchAt(IntPtr map, [MarshalAs(UnmanagedType.LPStr)] string query, [In] double[] point);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsSearchDestroy(IntPtr search);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
[return: MarshalAs(UnmanagedType.I1)]
public static extern bool vtsSearchDone(IntPtr search);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern uint vtsSearchResultsCount(IntPtr search);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern IntPtr vtsSearchResultData(IntPtr search, uint index);

[DllImport(LibName, CallingConvention = CallingConvention.Cdecl)]
public static extern void vtsSearchUpdateDistances(IntPtr search, [In] double[] point);

	}
}
